<?xml version="1.0" encoding="UTF-8"?>
<section id="credit">
	<title>区块链征信解决方案探索</title>
	<para>翻看了无数的文章没有找到一篇关于谈征信在区块链上怎么落地的文章。也在各种区块链微信群和QQ群中问了一圈，也没有人知道怎么落地。</para>
	<para>现在的情况是大家都知道区块链做征信没问题，区中心化，不可撰改，简直是征信系统而设计的。那么怎么使项目落地呢？没有一篇文章谈到这个问题。可能有些大公司已经实现了，处于技术保密，没有分享。</para>
	<para>看来只能靠自己了，以太坊和超级账本一直在研究，最近一段时间研究以太坊比较多，但是发现征信这个系统是在不适合在以太坊上实现，于是有回到超级账本上。</para>
	<para>回到超级账本上感觉有点不适应，超级账本没有 Token ， 超级账本的合约实现与以太坊完全不同。两个系统是两种思维解决同一个区块链需求。 </para>
	<para>一看 hyperledger 就是当前IBM风格，hyperledger 特点，体系庞大，结构复杂，难以理解，运维复杂。简单的问题用复杂的方式思考，做出一个复杂的系统，可用性极差。IBM的产品特点是，你只能他们合作，一旦合作（上了船）就摔不掉，从他们小型机，到中间件产品，以及各种行业解决方案。IBM的系统出了问题，只有IBM的人才能解决。</para>
	<para>随者 hyperledger 开源，我希望 hyperledger 的风格能脱离IBM的影子。</para>
	<para>回到正题，研究了几个 hyperledger 提供的 Example 后，对怎么实现征信需求，有了一点思路。</para>
	<para>首先 chaincode 合约并不复杂，由两个核心方法组织，分别是Init和Invoke。其次数据操作类似 map 数据结构, shim.ChaincodeStubInterface 接口提供了 get, put, del 等操作。</para>
	<section>
		<title>需求分析与概要设计</title>
		<para>证信系统信息查询问题，一怎样查询？二查询哪些信息？</para>
		<para>区块不是关系型数据库，无法实现SQL那样的发杂查询，所以设计接口要尽量迎合区块链的，有些情况需要妥协，适应区块链的弱点和不足。</para>
		<para>但是我们可以让数据库和区块链同时存在，相互弥补不足。</para>
		<para>数据库部分我这就就不讲了，区块链的实现方式是，使用身份证码号查询，返回 json 数据。</para>
	</section>
	<section>
		<title>数据结构</title>
		<para>首先我们定义一个结构体用来存储身份信息，征信信息远不止这几项，请根据你的实际情况定义即可</para>
		<programlisting>
		<![CDATA[
package main

import "fmt"
import "encoding/json"

type Person struct {
	No string	`json:"no"`
	Name string	`json:"name"`
	Sex	bool	`json:"sex"`
	Age int		`json:"age"`
    Address string	`json:"address"`
}

func main(){
	
	person := &Person{"430725198001190911","景峯",true,30,"Shenzhen,China"}

	personJson, _ := json.Marshal(person)

	fmt.Println(string(personJson));

	person1 := &Person{
        No: "430725198001190911",
		Name: "Neo Chen",
		Sex: true,
		Age: 35,
		Address: "Shenzhen, China"}

    json2, _ := json.Marshal(person1)
    fmt.Println(string(json2))
}	
		]]>
		</programlisting>
		<para>编译，运行，测试定义json是否正确。</para>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~/golang/contract % rm -rf person &&  go build person.go  && ./person
{"no":"430725198001190911","name":"景峯","sex":true,"age":30,"address":"Shenzhen,China"}
{"no":"430725198001190911","name":"Neo Chen","sex":true,"age":35,"address":"Shenzhen, China"}
		]]>
		</screen>
		<para>最终我们只需要结构体复制到合约代码中。</para>
		<programlisting>
		<![CDATA[
type Person struct {
	No string	`json:"no"`
	Name string	`json:"name"`
	Sex	bool	`json:"sex"`
	Age int		`json:"age"`
    Address string	`json:"address"`
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>将征信资料写入区块链</title>
		<para>通过下面的函数，将征信数据写入到区块链上。</para>
		<programlisting>
		<![CDATA[
func (s *SmartContract) createPerson(stub shim.ChaincodeStubInterface, args []string) sc.Response {
 
    if len(args) != 6 {
        return shim.Error("Incorrect number of arguments. Expecting 6")
    }
 
    var person = Person{No: args[1], Name: args[2], Sex: args[3], Age: args[4], Address: args[5]}
 
    personAsBytes, _ := json.Marshal(person)
    stub.PutState(args[0], personAsBytes)
 
    return shim.Success(nil)
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>查询区块数据</title>
		<para>通过下面方法查询链上的征信资料。</para>
		<programlisting>
		<![CDATA[
func (s *SmartContract) queryPerson(stub shim.ChaincodeStubInterface, args []string) sc.Response {
 
    if len(args) != 1 {
        return shim.Error("Incorrect number of arguments. Expecting 1")
    }
    personAsBytes, _ := stub.GetState(args[0])
    return shim.Success(personAsBytes)
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>删除区块</title>
		<para>通过下面方法删除征信数据。</para>
		<programlisting>
		<![CDATA[
func (s *SmartContract) deletePerson(stub shim.ChaincodeStubInterface, args []string) sc.Response {
 
    if len(args) != 1 {
        return shim.Error("Incorrect number of arguments. Expecting 1")
    }
    personAsBytes, _ := stub.GetState(args[0])
    
    err= stub.DelState(args[0])
	if err != nil {
		return shim.Error("Failed to delete Student from DB, key is: "+args[0])
	}
    
    return shim.Success(personAsBytes)
}	
		
		
		]]>
		</programlisting>
	</section>
	
	
	
</section>