<?xml version="1.0" encoding="UTF-8"?>
<section>
	<title>瓶颈分析</title>
	<section id="server.tpc">
		<title>TPC</title>
		<para>
			<ulink url="http://www.tpc.org/">http://www.tpc.org/</ulink>
		</para>
		<orderedlist>
			<title> Transaction Processing Performance Council</title>
			<listitem>
				<para>TPC-C：是在线事务处理(OLTP)的基准程序</para>
			</listitem>
			<listitem>
				<para>TPC-D：是决策支持(Decision Support) 的基准程序</para>
			</listitem>
			<listitem>
				<para>TPC-E：作为大型企业(Enterprise)信息服务的基准程序</para>
			</listitem>
			<listitem>
				<para>TPC-H：DecisionSupportforAdHocQueries基于特定查询的决策支持</para>
			</listitem>
			<listitem>
				<para>TPC-W：Webe-Commerce（互联网及电子商务）</para>
			</listitem>
			<listitem>
				<para>TPC-R：DecisionSupportforBusinessReporting（基于商业报告的决策支持）</para>
			</listitem>
		</orderedlist>
	</section>
	<section id="server.iops">
		<title>IOPS (Input/Output Operations Per Second, pronounced i-ops)</title>
		<para>
			<ulink url="http://www.storageperformance.org/home/">http://www.storageperformance.org/home/</ulink>
		</para>
	</section>
	<section id="server.rperf">
		<title>rPerf</title>
		<para>http://www-03.ibm.com/systems/power/hardware/notices/rperf.html</para>
		<screen>
		<![CDATA[

服务器所需要的rPerf值=SUM(NU * TX * CS/PP) / MC

NU:高峰时并发的用户数

TX:高峰时每个用户的交易数量

CS:在rPerf=1的服务器上，每个交易所需要的CPU秒

PP:高峰持续的时间

MC:最大的CPU利用率（推荐< 70%）

下面举例说明如何计算所需的rPerf值，假定某公司的情况如下：

业务高峰时间：  10:00-11:00=1Hour=3600秒

交易类型：      无复杂查询的简单应用

相对交易类型，用户数目分布:轻的=2000,   一般=50,   重的=5

在高峰时，每个用户的交易数量：

   轻的=120交易/用户

   一般=60交易/用户

   重的=15交易/用户

对于rPerf=1的服务器，每个交易响应的CPU秒

   轻的=1

   一般=3

   重的=15

最大的CPU利用率：60%

根据上述公式，可推算出不同交易类型所对应的rPerf值。

轻的交易：NU*TX*CS/PP=2000*120*1/3600=66.0

一般交易：NU*TX*CS/PP=50*60*3/3600=2.5

重的交易：NU*TX*CS/PP=5*15*15/3600=0.3

所需的总的rPerf/MC=(66.0+2.5+0.3)/0.7=98.3 rPerf
		]]>
		</screen>
	</section>

	<section>
		<title>Springboot</title>
		<screen>
		<![CDATA[
/ # cat /proc/1/status | grep Threads
Threads:        61		
		]]>
		</screen>
		<para>另一中方式，记得数值要 -1 因为ls -l 第一行是 total 0 统计文件数量。</para>
		<screen>
		<![CDATA[
/ # ls -l /proc/1/task/ | wc -l
61		
		]]>
		</screen>

	</section>
	<section>
		<title>Redis 连接池不生效</title>
		<para>压力测试中，系统出现瓶颈，流量始终无法达到数据库。</para>
		<para>开发小伙伴这样配置 Redis 由于太久脱离一线，我也不清楚配置是否正确，只能验证一下。</para>
		<screen>
		<![CDATA[
spring.redis.host=172.18.200.5
spring.redis.port=6379
spring.redis.password=passw0rd
spring.redis.database=0

spring.redis.pool.max-active=1000
spring.redis.pool.max-idle=10
spring.redis.pool.max-wait=-1
spring.redis.pool.min-idle=5
spring.redis.pool.timeout=1000		
		]]>
		</screen>
		<para>查看客户端连接数是 2</para>
		<screen>
		<![CDATA[
127.0.0.1:6379> info Clients
# Clients
connected_clients:2
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:8
client_recent_max_output_buffer:0
blocked_clients:0
tracking_clients:0
clients_in_timeout_table:0		
		]]>
		</screen>
		<para>创建一个空的 Springboot 项目，写一个最简单的接口，接口中做 set/get 操作。</para>
		<screen>
		<![CDATA[
	@Autowired
	private RedisTemplate<String, String> redisTemplate;

	@GetMapping("/redis")
	public String redis() {
		redisTemplate.opsForValue().set("name","neo",10, TimeUnit.SECONDS);
		String name = (String) redisTemplate.opsForValue().get("name");
		return name;
	}		
		]]>
		</screen>
		<para>使用 ab 命令压测一下</para>
		<screen>
		<![CDATA[
ab -c 100 -n 10000 http://localhost:8080/redis
		]]>
		</screen>
		<para>观看连接池的状态</para>
		<screen>
		<![CDATA[
127.0.0.1:6379> info Clients
# Clients
connected_clients:2
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:8
client_recent_max_output_buffer:0
blocked_clients:0
tracking_clients:0
clients_in_timeout_table:0			
		]]>
		</screen>
		<para>connected_clients:2 数值没有变化，我的猜测果然是对的，这种配置我记得是 Spring 1.5 之前的。</para>
		<para>网上说 Springboot 默认使用 lettuce</para>
		<screen>
		<![CDATA[
spring.redis.host=172.18.200.5
spring.redis.port=6379
spring.redis.password=passw0rd
spring.redis.database=0
		
spring.redis.lettuce.pool.enabled=true
spring.redis.lettuce.pool.max-active=1000
spring.redis.lettuce.pool.max-idle=80
spring.redis.lettuce.pool.min-idle=20
spring.redis.lettuce.pool.max-wait=-1ms
spring.redis.lettuce.shutdown-timeout=100ms
spring.cache.redis.cache-null-values=false	
		]]>
		</screen>
		<para>配置后使用 ab 压测，connected_clients:2 没有任何变化。</para>
		<screen>
		<![CDATA[
127.0.0.1:6379> info Clients
# Clients
connected_clients:2
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:8
client_recent_max_output_buffer:0
blocked_clients:0
tracking_clients:0
clients_in_timeout_table:0			
		]]>
		</screen>
		<para>开启 Springboot 调试模式 debug=true，启动需要引入 commons-pool2</para>
		<screen>
		<![CDATA[
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>	
		]]>
		</screen>
		<para>启动提示</para>
		<screen>
		<![CDATA[
Caused by: java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig		
		]]>
		</screen>
		<para>引入 commons-pool2 后启动成功</para>
		<screen>
		<![CDATA[
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>			
		]]>
		</screen>
		<para>虽然启动成功，但是 ab 压测仍然 connected_clients:2 </para>
		<screen>
		<![CDATA[
127.0.0.1:6379> info Clients
# Clients
connected_clients:2
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:20480
client_recent_max_output_buffer:0
blocked_clients:0
tracking_clients:0
clients_in_timeout_table:0		
		]]>
		</screen>
		<para>只能在debug信息中找线索，发现 JedisConnectionConfiguration</para>
		<screen>
		<![CDATA[
   JedisConnectionConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.apache.commons.pool2.impl.GenericObjectPool', 'redis.clients.jedis.Jedis' (OnClassCondition)
		]]>
		</screen>
		<para>改为 jedis 试试，pom.xml</para>
		<screen>
		<![CDATA[
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
			<exclusions>
				<exclusion>
					<groupId>io.lettuce</groupId>
					<artifactId>lettuce-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>	
		]]>
		</screen>
		<para>配置文件做响应调整</para>
		<screen>
		<![CDATA[
spring.redis.jedis.pool.max-active=1000
spring.redis.jedis.pool.max-idle=80
spring.redis.jedis.pool.min-idle=20
spring.redis.jedis.pool.max-wait=-1
		]]>
		</screen>
		<para>使用 ab 压测一轮，终于 connected_clients:190 上去了。</para>
		<screen>
		<![CDATA[
127.0.0.1:6379> info Clients
# Clients
connected_clients:190
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:20480
client_recent_max_output_buffer:0
blocked_clients:0
tracking_clients:0
clients_in_timeout_table:0	
		]]>
		</screen>
		<para>lettuce 连接池，始终还没有解决，目前先用 jedis，其实连接池是同质化产品，虽有性能差异，但差距非常小，对于项目整体而言可以说微乎其微。就如同 Tomcat 跟 Undertow 差距，有时我们需要整理考虑架构方案，并不是所有好工具组合后就一定是好产品。</para>

	</section>
	<section>
		<title>数据库链接池</title>
		<para>很多时候人们从网上找到 springboot 文章，文章中说这样配置连接池，于是就复制站台到自己的配置文件中，也没有去深究，最终流到生产环境。</para>
		<screen>
		<![CDATA[
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=false
spring.datasource.test-while-idle=true
spring.datasource.time-between-eviction-runs-millis=18800
spring.datasource.jdbc-interceptors=ConnectionState;SlowQueryReport(threshold=0)		
		]]>
		</screen>
		<para>上面的配置已经作废，目前 Springboot 默认使用 hikari 链接池，他的正确配置如下</para>
		<screen>
		<![CDATA[
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=200
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=Hikari
spring.datasource.hikari.max-lifetime=55000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1
		]]>
		</screen>
		<para>测试方法，写一个测试接口，里面运行一条 SQL 即可</para>
		<screen>
		<![CDATA[
	@Autowired
	private JdbcTemplate jdbcTemplate;

	@GetMapping("/jdbc")
	public String jdbc() {
		String query = "SELECT * from test where id = 10";
		return jdbcTemplate.queryForObject(query, (resultSet, i) -> {
			System.out.println(resultSet.getString(1) + "," + resultSet.getString(2) + "," + resultSet.getString(3));
			return ("OK");
		});
	}		
		]]>
		</screen>
		<para>然后压测这个接口，观察 show full processlist; 正常会不停的变化，如果没有任何变化，例如只启动了 8 个链接，就说明链接池配置没有生效。</para>
		<screen>
		<![CDATA[
mysql> show status like 'Threads%';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| Threads_cached    | 8     |
| Threads_connected | 40    |
| Threads_created   | 111   |
| Threads_running   | 1     |
+-------------------+-------+
4 rows in set (0.00 sec)

mysql> show full processlist;
+--------+------+-------------------+------+---------+------+----------+-----------------------+
| Id     | User | Host              | db   | Command | Time | State    | Info                  |
+--------+------+-------------------+------+---------+------+----------+-----------------------+
| 507077 | root | 172.20.0.1:50129  | NULL | Query   |    0 | starting | show full processlist |
| 507638 | root | 172.18.5.89:49605 | test | Sleep   |    0 |          | NULL                  |
| 507639 | root | 172.18.5.89:49707 | test | Sleep   |    0 |          | NULL                  |
| 507640 | root | 172.18.5.89:49734 | test | Sleep   |    0 |          | NULL                  |
| 507641 | root | 172.18.5.89:49744 | test | Sleep   |    0 |          | NULL                  |
| 507642 | root | 172.18.5.89:49766 | test | Sleep   |    0 |          | NULL                  |
| 507643 | root | 172.18.5.89:49817 | test | Sleep   |    0 |          | NULL                  |
| 507644 | root | 172.18.5.89:49900 | test | Sleep   |    0 |          | NULL                  |
| 507645 | root | 172.18.5.89:49994 | test | Sleep   |    0 |          | NULL                  |
| 507647 | root | 172.18.5.89:50153 | test | Sleep   |    0 |          | NULL                  |
| 507648 | root | 172.18.5.89:50355 | test | Sleep   |    0 |          | NULL                  |
| 507649 | root | 172.18.5.89:50507 | test | Sleep   |    0 |          | NULL                  |
| 507650 | root | 172.18.5.89:50627 | test | Sleep   |    0 |          | NULL                  |
| 507651 | root | 172.18.5.89:50796 | test | Sleep   |    0 |          | NULL                  |
| 507652 | root | 172.18.5.89:51105 | test | Sleep   |    0 |          | NULL                  |
| 507653 | root | 172.18.5.89:51373 | test | Sleep   |    0 |          | NULL                  |
| 507654 | root | 172.18.5.89:51598 | test | Sleep   |    0 |          | NULL                  |
| 507655 | root | 172.18.5.89:52063 | test | Sleep   |    0 |          | NULL                  |
| 507656 | root | 172.18.5.89:52605 | test | Sleep   |    0 |          | NULL                  |
| 507657 | root | 172.18.5.89:53186 | test | Sleep   |    0 |          | NULL                  |
| 507658 | root | 172.18.5.89:53621 | test | Sleep   |    0 |          | NULL                  |
| 507659 | root | 172.18.5.89:53955 | test | Sleep   |    0 |          | NULL                  |
| 507660 | root | 172.18.5.89:54126 | test | Sleep   |    0 |          | NULL                  |
| 507661 | root | 172.18.5.89:54946 | test | Sleep   |    0 |          | NULL                  |
| 507662 | root | 172.18.5.89:55164 | test | Sleep   |    0 |          | NULL                  |
| 507663 | root | 172.18.5.89:55517 | test | Sleep   |    0 |          | NULL                  |
| 507666 | root | 172.18.5.89:56070 | test | Sleep   |    0 |          | NULL                  |
| 507667 | root | 172.18.5.89:56431 | test | Sleep   |    0 |          | NULL                  |
| 507668 | root | 172.18.5.89:56828 | test | Sleep   |    0 |          | NULL                  |
| 507669 | root | 172.18.5.89:57421 | test | Sleep   |    0 |          | NULL                  |
| 507670 | root | 172.18.5.89:57801 | test | Sleep   |    0 |          | NULL                  |
| 507671 | root | 172.18.5.89:58105 | test | Sleep   |    0 |          | NULL                  |
| 507672 | root | 172.18.5.89:58541 | test | Sleep   |    0 |          | NULL                  |
| 507675 | root | 172.18.5.89:59031 | test | Sleep   |    0 |          | NULL                  |
| 507676 | root | 172.18.5.89:59504 | test | Sleep   |    0 |          | NULL                  |
+--------+------+-------------------+------+---------+------+----------+-----------------------+
35 rows in set (0.00 sec)
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
		
		]]>
		</screen>
	</section>
	<section>
		<title>回访管理</title>
		<screen>
		<![CDATA[
		
		]]>
		</screen>
	</section>
	<section>
		<title>站内消息</title>
		<screen>
		<![CDATA[
		
		]]>
		</screen>
	</section>
</section>