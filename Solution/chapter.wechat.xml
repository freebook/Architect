<?xml version="1.0" encoding="UTF-8"?>
<chapter id="wechat">
	<title>微信公众平台 </title>
	<section>
		<title>微信公众平台原理</title>
		<para>设置方法: 高级功能  &gt; 开发模式</para>
		<screen>
URL：http://wechat.example.com/test.php
Token：a85f0785254000cd942efsef
		</screen>
		<para>原理，当用户添加公众号后，发送文本，语音等等消息，微信就会将内容Post的你的URL，然后读取返回的XML内容</para>
		<graphic  format="png" fileref="../images/solution/wechat/wechat.png" srccredit="neo" />
	</section>
	<section id="wechat.mode">
		<title>微信公众平台通常提供的服务模式</title>
		<para>通常做法是问答交互方式，</para>
		<screen>
问：天气
答：今天天气白天20度，晚上19度，东南风。

问：附近商场
答：茂业 500米， 天虹 100米
		</screen>
		<para>提供菜单选择方式。</para>
		<screen>
[1] 天气
[2] 周边信息
[3] 电影院
[4]	饮食
[5] 新闻焦点

当选玩家输入 4 系统回复

[31] 肯德基
[32] 麦当劳
[33] 必胜客

玩家输入 31 系统回复

[311] XXXXXXXXXXXXXXXX

选玩家输入 5 系统回复
[51] 北京P2.5XXXXX
[52] 深圳推出XXXX政策
[52] 奥巴马XXXXXX

选玩家输入 52 系统回复

XXXXXXXXXXXXXXXXXXXX
图片
XXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX
		</screen>
	</section>
	<section id="wechat.solution">
		<title>微信公众平台开发</title>
		<para>我看到网上很多人做法都是这样实现的</para>
		<screen>
if input = '天气' {
	...
} else if(input = '饮食'){
	...
} else if(xxx){
....
} ....
....

switch (input){
	case '天气':
		xxxx
	case '饮食':
		xxxx
	case xxxx
		xxxxx
		...
		...
	default:
		xxxx
}

		</screen>
		<para>稍微高级的做法是，定义一个数组，或者一个hashmap,或者使用数据库实现key,value定义。然后判断keyword 是否存在，如果存在就处理 key 所对应的 value。</para>
		<para>这样的做法会导致后期，极难维护，可读性极差，增加一个需求，就增加一段代码，新的代码会影响整个程序。国内开发者很喜欢使用if来拼接一个sql语句，这是坑爹的写法。</para>
		<para>下面谈谈我思路，我将采用传统的MVC模式，</para>
		<screen>
微信  ---post xml---> 入口URL
                      |
                      V
              +----------------+
              | Router         |     这里是路由映射，用户输入keyword 映射到 controller 上，
              +----------------+
                      |
                      V
              +----------------+
              | Controller     |     Controller 会加载请求的class 做一系列处理，包括数据模型处理，视图渲染，
              +----------------+
                      |
                      V
+--------------- Application -------------------+
| class xxx | class xxx | class xxx | class xxx |
+-----------------------------------------------+
                      |
                      V
               +--------------+
               | Model        |     处理数据
               +--------------+
                      |
                      V
               +--------------+
               | View         |     最后呈现xml。 微信会通过返回的xml将消息推送给用户
               +--------------+
		</screen>
		<para>任务处理图，程序应该有一个入口，多个出口，而不是层层循环，层层判断。一半来说for/if/while等等 超过三层，程序阅读就会非常困难。</para>
		<screen>
		<![CDATA[
                               .---> 终结
                              /                        .-->  终结
                             /            .--> 终结               /
                            /            /           /
微信 ---> Post XML ---> 接口程序 --------------------------------------------->  - 终结
                            \      \            \
                             \      `---> 终结               \
                              \                   `--->  终结
                               `--->  终结
		]]>
		</screen>
		<para></para>
		<para>实现菜单结构</para>
		<screen>
		<![CDATA[
<menu>
	<menuitem>
		<item>[1] 天气 </item>
		<controller></controller>
	<menuitem>
	<menuitem>
		<item>[2] 新闻 </item>
		<controller></controller>
	<menuitem>
	<menuitem>
		<item>[3] 饮食 </item>
		<submenu>
			<menuitem>
				<item>[31] 肯德基 </item>
				<controller></controller>
			</menuitem>
			<menuitem>
				<item>[32] 麦当劳 </item>
				<controller></controller>
			</menuitem>
		</submenu>
	<menuitem>
</menu>
		]]>
		</screen>
		<para>XML 不太灵活，下面是数据库方案</para>
		<screen>
CREATE TABLE menu
(
  id serial NOT NULL,
  mid integer, -- mid 字段
  menuitem character varying NOT NULL, -- menuitem 字段
  controller character varying, -- 映射控制器
  submenu_id integer, -- 子菜单ID
  status boolean DEFAULT true, -- 启用，禁用状态
  ctime timestamp without time zone DEFAULT now(), -- 创建时间
  mtime timestamp without time zone DEFAULT now(), -- 修改时间
  CONSTRAINT id PRIMARY KEY (id),
  CONSTRAINT submenu_id FOREIGN KEY (submenu_id)
      REFERENCES menu (mid) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT mid UNIQUE (mid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE menu
  OWNER TO dba;
COMMENT ON TABLE menu
  IS 'menu table';
COMMENT ON COLUMN menu.mid IS 'mid 字段';
COMMENT ON COLUMN menu.menuitem IS 'menuitem 字段';
COMMENT ON COLUMN menu.controller IS '映射控制器';
COMMENT ON COLUMN menu.submenu_id IS '子菜单ID';
COMMENT ON COLUMN menu.status IS '启用，禁用状态';
COMMENT ON COLUMN menu.ctime IS '创建时间';
COMMENT ON COLUMN menu.mtime IS '修改时间';
		</screen>
		<para>数据</para>
		<screen>
INSERT INTO "menu" ("mid", "menuitem", "controller", "submenu_id", "status") VALUES (1, '天气', 'weather', NULL, true);
INSERT INTO "menu" ("mid", "menuitem", "controller", "submenu_id", "status") VALUES (2, '新闻焦点', NULL, NULL, true);
INSERT INTO "menu" ("mid", "menuitem", "controller", "submenu_id", "status") VALUES (21, '国内新闻', 'news/1', 2, true);
INSERT INTO "menu" ("mid", "menuitem", "controller", "submenu_id", "status") VALUES (22, '国际新闻', 'news/2', 2, true);
		</screen>
		<para>这里id字段可有可无，实际上mid可以设置为主键，考虑到中国人习惯性才增加了id. submenu_id外键指向了mid 而没有指向id. 因为id是serial会顺序增加，会使整个菜单排序混乱。这样有也缺点，就是菜单项不能超过十个。</para>
		<para>接下来实现路由到控制器的分发。</para>
		<screen>
关注：显示菜单
[1] 天气
[2] 新闻焦点

发送：1
取出weather, 实例化 weather 类 执行index() 方法。 返回天气预报
$weather = new Weather()

发送：2
[21] 国内新闻
[22] 国际新闻

发送：21
实例化 news 类，构造方法参数指定为 1 返回国内新闻列表
$news = new News(1);
		</screen>
		<para>当 submenu_id 为 NULL　时表示他有子菜单，如果非 NULL 就取controller参数。</para>
		<para>接下来要做的就是需求增加，只需要在menu表中增加一个记录，然后开发对应的controller. 有一些不使用的项目随时可以将status设置为禁用状态</para>
	</section>
</chapter>