<?xml version="1.0" encoding="UTF-8"?>
<section id="index"><?dbhtml dir="h5" ?>
	<title>多维度架构之网站HTML</title>
	<subtitle></subtitle>
	<screen>
	<![CDATA[
                                       .---> media [mp3, wma, wmv, rmvb, asf, divx]-\
                                      /                                       +------------+
                                     .-----> photo [gif, jpg, png, swf] ----> | Raid Array | <--.
    /------------------- <---------\/                                         +------------+     \
user -> dns -> load balancing -> squid -> [cache] <----[html]----\                  /            |
                 \ \ \______<______/\                      +-------------+         /             |
                  \ \                \-----> web app ----> | html        |--------^              |
                   \ \____________________________/\       | php,jsp,cgi |                       |
                    \                               \      +-------------+                       |
                     \                               `-----> memcached [node1, node2, node(n)]   |
                      \__________________________________________/\                              |
                                                                   `------> Database cluster     |
    +--------------------------------------+                                      \              |
    | Author: neo chen <openunix#163.com>  |                                       `-------------+
    | Nickname: netkiller                  |
    | Homepage: http://netkiller.github.io |
    +--------------------------------------+
	]]>
	</screen>





	<section>
		<title>网站的历史演变</title>
		<section>
			<title>常用软硬件组成</title>
			<para>一个网站由下面几部分组成：</para>
			<orderedlist>
				<title>网站组成</title>
				<listitem>
					<para>硬件 hardware</para>
				</listitem>
				<listitem>
					<para>操作系统 operation system</para>
				</listitem>
				<listitem>
					<para>应用软件 application software</para>
				</listitem>
				<listitem>
					<para>网站程序以及开发语言 web program and script</para>
				</listitem>
			</orderedlist>

			<orderedlist>
				<title>硬件包括</title>
				<listitem>
					<para>网络硬件（路由器 route, 交换机 switch)</para>
				</listitem>
				<listitem>
					<para>服务器 server</para>
				</listitem>
				<listitem>
					<para>KVM over IP</para>
				</listitem>
				<listitem>
					<para>其他包括，机柜等</para>
				</listitem>
			</orderedlist>

			<orderedlist>
				<title>操作系统包括</title>
				<listitem>
					<para>Windows Server</para>
				</listitem>
				<listitem>
					<para>Linux</para>
				</listitem>
				<listitem>
					<para>FreeBSD</para>
				</listitem>
				<listitem>
					<para>Other(Sun,Novell,Sco...)</para>
				</listitem>
			</orderedlist>

			<para>其中应用软件按平台分类</para>

			<orderedlist>
				<title>Windows 应用软件包括</title>
				<listitem>
					<para>dns (dns)</para>
				</listitem>
				<listitem>
					<para>web (IIS)</para>
				</listitem>
				<listitem>
					<para>ftp (IIS)</para>
				</listitem>
				<listitem>
					<para>mail (Exchange)</para>
				</listitem>
				<listitem>
					<para>database (SQL Server)</para>
				</listitem>
				<listitem>
					<para>ldap (Active Directory)</para>
				</listitem>
			</orderedlist>
			<orderedlist>
				<title>Unix like 应用软件包括</title>
				<listitem>
					<para>dns (bind)</para>
				</listitem>
				<listitem>
					<para>web (apache, lighttpd, tomcat)</para>
				</listitem>
				<listitem>
					<para>ftp (proftpd, pureftpd, wu-ftp, vsftpd)</para>
				</listitem>
				<listitem>
					<para>mail (sendmail,postfix, qmail)</para>
				</listitem>
				<listitem>
					<para>database (PostgreSQL, MySQL)</para>
				</listitem>
				<listitem>
					<para>ldap (OpenLDAP)</para>
				</listitem>
			</orderedlist>

			<orderedlist>
				<title>其他应用软件包括</title>
				<listitem>
					<para>cache (squid, nginx, memcached...)</para>
				</listitem>
				<listitem>
					<para>web (jboss, weblogic...)</para>
				</listitem>
				<listitem>
					<para>database (Oracle, DB2...)</para>
				</listitem>
			</orderedlist>

			<orderedlist>
				<title>网站程序以及开发语言</title>
				<listitem>
					<para>php</para>
				</listitem>
				<listitem>
					<para>java (jsp)</para>
				</listitem>
				<listitem>
					<para>.net (aspx)</para>
				</listitem>
				<listitem>
					<para>fastcgi (python,perl,rubby,c/c++ ...)</para>
				</listitem>
			</orderedlist>

			<para>怎样定义多大的网站叫大型网站呢？我也不知道，但凡大型网站都具备本文所提的几点。</para>
			<orderedlist>
				<title>门户网站的需求</title>
				<listitem>
					<para>海量用户访问</para>
				</listitem>
				<listitem>
					<para>海量用户存储</para>
				</listitem>
				<listitem>
					<para>国内外互通及南北互通</para>
				</listitem>
				<listitem>
					<para>快速响应</para>
				</listitem>
				<listitem>
					<para>7×24不间断运行</para>
				</listitem>
				<listitem>
					<para>易于维护</para>
				</listitem>
			</orderedlist>
			<orderedlist>
				<title>门户网站的几个技术要点</title>
				<listitem>
					<para>智能域名服务器 Smart DNS</para>
				</listitem>
				<listitem>
					<para>集群负载均衡 Cluster</para>
				</listitem>
				<listitem>
					<para>缓存技术 Cache</para>
				</listitem>
				<listitem>
					<para>静态化</para>
				</listitem>
				<listitem>
					<para>图片服务器分离</para>
				</listitem>
				<listitem>
					<para>压缩数据传输</para>
				</listitem>
				<listitem>
					<para>时间同步</para>
				</listitem>
				<listitem>
					<para>数据存储</para>
				</listitem>
			</orderedlist>
		</section>
		<section>
			<title>第一代纯静态网站</title>
			<para>ftp/rsync 同步</para>
		</section>
		<section>
			<title>第二代纯文本文件采用分隔符做数据存储网站</title>
			<para>这是出现了cgi/isapi/nsapi技术,perl 成为主流</para>
		</section>
		<section>
			<title>第三代数据库存储网站</title>
			<para>出现动态脚本语言如php,asp,coldfusion，这个时期 php成为主流</para>
			<para>出现所见即所得网页工具</para>
			<para>256色gif 动画</para>
		</section>
		<section>
			<title>第四代DNS负载均衡加反向代理</title>
			<para>开发语言则百花齐放php,asp.net,java,三大主流三足鼎立。perl慢慢没落。</para>
			<para>flash 动画</para>
		</section>
		<section>
			<title>第五代负载均衡集群</title>
			<para>ajax, css+div, xhtml</para>
		</section>
	</section>


	<section id="cluster">
		<title>集群(Cluster)</title>
		<!-- standalone system -->
		<orderedlist>
			<title>集群有很多实现方法，分为硬件和软件，集群可以在不同网络层面上实现</title>
			<listitem>
				<para>实现IP轮循（Bind DNS）</para>
			</listitem>
			<listitem>
				<para>硬件四层交换（硬件负载均衡设备 F5 BIG IP）</para>
			</listitem>
			<listitem>
				<para>软件四层交换（linux virtual server）</para>
			</listitem>
			<listitem>
				<para>应用层上实现（tomcat）</para>
			</listitem>
		</orderedlist>
		<para>越是低层性能越好，越是上层功能更强</para>
		<orderedlist>
			<title>集群的分类</title>
			<listitem>
				<para>高可用性集群</para>
			</listitem>
			<listitem>
				<para>负载均衡集群</para>
			</listitem>
			<listitem>
				<para>超级计算集群</para>
			</listitem>
		</orderedlist>
		<para>网站一般用到两种集群分别是高可用性集群和负载均衡集群</para>
		<section>
			<title>负载均衡</title>
			<section>
				<title>DNS负载均衡</title>
				<para>这是早期出现的负载均衡技术，直到现在，很多网站仍然使用DNS负载均衡。</para>
				<para>你可通过ping命令观看它是如何工作的，例如你可反复ping个网域名。</para>
				<screen>
			<![CDATA[
C:\>ping www.163.com

Pinging www.cache.split.netease.com [220.181.28.52] with 32 bytes of data:

Reply from 220.181.28.52: bytes=32 time=226ms TTL=53
Reply from 220.181.28.52: bytes=32 time=225ms TTL=53
Reply from 220.181.28.52: bytes=32 time=226ms TTL=53
Reply from 220.181.28.52: bytes=32 time=226ms TTL=53

Ping statistics for 220.181.28.52:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 225ms, Maximum = 226ms, Average = 225ms

C:\>ping www.163.com

Pinging www.cache.split.netease.com [220.181.28.53] with 32 bytes of data:

Reply from 220.181.28.53: bytes=32 time=52ms TTL=52
Reply from 220.181.28.53: bytes=32 time=53ms TTL=52
Reply from 220.181.28.53: bytes=32 time=52ms TTL=52
Reply from 220.181.28.53: bytes=32 time=52ms TTL=52

Ping statistics for 220.181.28.53:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 52ms, Maximum = 53ms, Average = 52ms

C:\>ping www.163.com

Pinging www.cache.split.netease.com [220.181.28.50] with 32 bytes of data:

Reply from 220.181.28.50: bytes=32 time=51ms TTL=53
Reply from 220.181.28.50: bytes=32 time=52ms TTL=53
Reply from 220.181.28.50: bytes=32 time=52ms TTL=53
Reply from 220.181.28.50: bytes=32 time=51ms TTL=53

Ping statistics for 220.181.28.50:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 51ms, Maximum = 52ms, Average = 51ms

C:\>
			]]>
				</screen>
				<orderedlist>
					<title>DNS负载均衡主要优点</title>
					<listitem>
						<para>技术简单，容易实现，灵活，方便，成本低</para>
					</listitem>
					<listitem>
						<para>Web服务器可以位于互联网的任意位置上，无地理限制。</para>
					</listitem>
					<listitem>
						<para>DNS的主从结构非常稳定</para>
					</listitem>
					<listitem>
						<para>可以有效的分散DDOS攻击。</para>
					</listitem>
					<listitem>
						<para>你甚至可以在DNS服务商那里实现，自己不需要添加设备。而且没有带宽开销。</para>
					</listitem>
				</orderedlist>
				<orderedlist>
					<title>DNS负载均衡主要缺点</title>
					<listitem>
						<para>DNS负载均衡采用的是简单的轮循负载算法，不能够按照服务器节点的处理能力分配负载。</para>
					</listitem>
					<listitem>
						<para>不支持故障转移(failover)和自动恢复failback ,如果某台服务器拓机，DNS仍会将用户解析到这台故障服务器上，导致不能响应客户端。</para>
					</listitem>
					<listitem>
						<para>如果添加节点或撤出节点，不能即时更新到省市级DNS,可导致部分地区不能访问。</para>
					</listitem>
					<listitem>
						<para>占用大量静态IP。</para>
					</listitem>
				</orderedlist>
			</section>
			<section>
				<title>软件四层交换负载均衡</title>
				<orderedlist>
					<title>软件四层交换负载均衡为我们解决了几个问题</title>
					<listitem>
						<para>能够按照服务器节点的处理能力分配负载。</para>
					</listitem>
					<listitem>
						<para>支持故障转移(failover)和自动恢复failback ,如果某节点拓机，调度器自动将它剔除，不响应客户端访问，当节点故障排除调度器立即恢复节点。</para>
					</listitem>
					<listitem>
						<para>可以随时添加节点或撤出节点，即时生效,方便网站扩容。</para>
					</listitem>
				</orderedlist>
				<orderedlist>
					<title>软件四层交换负载均衡优点</title>
					<listitem>
						<para>仅仅需要一个静态IP。</para>
					</listitem>
					<listitem>
						<para>节点位于私有网络上与WAN隔离，用户面对的只是调度器。</para>
					</listitem>
					<listitem>
						<para>可以随时添加节点或撤出节点。</para>
					</listitem>
					<listitem>
						<para>通过端口可以组建多个集群。</para>
					</listitem>
				</orderedlist>

			</section>
			<section>
				<title>应用层负载均衡</title>

				<para>Tomcat balancer</para>
				<para>mod_proxy_balancer.so ,tomcat mod_jk.so</para>

				<para>MySQL proxy / MySQL-LB</para>

			</section>
		</section>
		<section>
			<title>高可用性集群</title>
			<para>俗称：双机热备份</para>
			<para>关键词：心跳线</para>
			<para>两部服务器，或多部服务器，形成一个集群，当主服务器崩溃是，立即切换到其它节点上。</para>
			<para>两部服务器要做到，内容实时同步，保持数据一直。</para>
			<para>一般用 heartbeat + DRBD 实现。heartbeat负责切换服务器，DRBD用于同步数据。</para>
		</section>
		<section>
			<title>负载均衡设备</title>
			<orderedlist>
				<title>负载均衡成熟产品</title>
				<listitem>
					<para>F5 Big IP</para>
				</listitem>
				<listitem>
					<para>Array</para>
				</listitem>
			</orderedlist>
			<para>这些设备可提供3,4,7层负载均衡HA，硬件已经压缩，HTTP头改写，URL改写...</para>
			<para>其中3层交换部分多采用硬件实现。</para>
			<para>
				<ulink url="/intranet/index.html">更多关于F5 与 Array 资料点击进入</ulink>
			</para>
		</section>
		<section>
			<title>会话保持</title>
		</section>
		<section>
			<title>健康状态检查</title>
		</section>
	</section>

	<section id="cache">
		<title>缓存技术</title>
		<para>首先要说明，很多缓存技术依赖静态化。下面展示了缓存可能出现的位置。</para>
		<para>用户user -> 浏览器缓存 IE/Firefox Cache -> 逆向代理缓存 Reverse proxy Cache -> WEB服务器缓存 Apache cache -> 应用程序缓存 php cache -> 数据库缓存 database cache</para>
		<para>当然交换机，网络适配器，硬盘上也有Cache 但这不是我们要讨论的范围。</para>
		<para>缓存存储方式主要是内存和文件两种，后者是存于硬盘中。</para>
		<orderedlist>
			<title>网站上使用的缓存主要包括五种：</title>
			<listitem>
				<para>浏览器 缓存</para>
			</listitem>
			<listitem>
				<para>逆向代理/CDN缓存</para>
			</listitem>
			<listitem>
				<para>WEB服务器缓存</para>
			</listitem>
			<listitem>
				<para>应用程序缓存</para>
			</listitem>
			<listitem>
				<para>数据库缓存</para>
			</listitem>
		</orderedlist>
		<para>将上面的缓存合理地，有选择性的使用可大大提高网站的访问能力。</para>
		<para>总之，想让你的网站更快，更多并发，答案是cache,cache 再 cache</para>
		<section>
			<title>浏览器缓存</title>

			<section>
				<title>Cache-Control</title>
				<para>通过 Cache-Control 设置页面缓存时间</para>
				<screen><![CDATA[
max-age
max-age 格式写为：max-age=n，n是以秒为单位, 这个值是告知客户端GMT + N 后页面过期，缓存服务器在s-maxage值为空的时候也会使用这个参数的值。

s-maxage
s-maxage的格式跟max-age一样，只不过他是给缓存服务器使用的。

must-revalidate
这个参数用来告知客户端和缓存服务器，在GET请求的时候必须与源服务器验证实体是否为最新版本。

Cache-Control:max-age=1200,s-maxage=3600
			]]></screen>
				<screen><![CDATA[
Last-Modified
这个参数提供了实体最近一次被修改的时间。这个名字起得不错，当实体被修改了之后，这个参数也就会被修改.
			]]></screen>
				<para>ETag</para>
				<screen><![CDATA[
ETag
ETag是根据内容生成的一段hash字符串，采用信息摘要算法，保证每一个页面有一个唯一字串。
			]]></screen>
				<para>expires</para>
				<para>expires 是HTTP 1.0 中定义的，已经不能满足用户的需要在 HTTP 1.1 加入了max-age，建议使用 max-age替代expires</para>
				<screen><![CDATA[
指令					含义
public				可以在任何地方缓存
private				只能被浏览器缓存
no-cache			不能在任何地方缓存
must-revalidate		缓存必须检查更新版本
proxy-revalidate	代理缓存必须检查更新版本
max-age				内容能够被缓存的时期，以秒表示
s-maxage			覆盖共享缓存的max-age设置
			]]></screen>
				<para>在Squid, Varnish, Apache, Lighttpd, Nginx 中都可是实现HTTP Cache-Control推送，每次修改都需要重新加载，不太灵活。</para>
				<screen><![CDATA[
ExpiresActive On
ExpiresByType image/gif "access plus 1 month"
ExpiresByType image/png "access plus 1 month"
ExpiresByType image/jpeg "access plus 1 month"
ExpiresByType text/css "access plus 1 month"
ExpiresByType text/javascript "access plus 1 month"
ExpiresByType application/x-javascript "access plus 1 month"
ExpiresByType application/x-shockwave-flash "access plus 1 month"


server.modules = (
...
"mod_expire",
...
)

$HTTP["url"] =~ "^/images/" {
expire.url = ( "" => "access 30 days" )
}
			]]></screen>
				<para>我喜欢自己控制TTL时间，且每个页面单独设置，可以随时调整设置。</para>

				<section>
					<title>在程序中灵活操作 Cache-Control</title>

					<para>在MVC框架中每个控制器下的方法都可以单独操作Cache</para>
					<screen><![CDATA[
Class blog extend Controller{
	blog(){
		header('Cache-Control: max-age=28800');
	}
	list(){
		header('Cache-Control: max-age=3600');
	}
	details(){
		header('Cache-Control: max-age=160');
	}
}
				]]></screen>
					<para>你还可以封装到Controller中</para>
					<screen><![CDATA[
Class blog extend Controller{
	blog(){
		this->cache('28800');
	}
	list(){
		this->cache('3600');
	}
	details(){
		this->cache('160');
	}
}
				]]></screen>
				</section>
				<section>
					<title>非程序文件缓存处理</title>
					<para>首先做一个Rewrite让程序接管所有图片请求</para>
					<screen><![CDATA[
url.rewrite = ( "^/(.+)" => "/index.php/$1" )
				]]></screen>
					<para>然后程序通过PATHINFO取出图片URL</para>
					<screen><![CDATA[
http://images.example.com/your/dir/test.jpg => http://images.example.com/index.php/your/dir/test.jpg
				]]></screen>
					<para>程序取出 /your/dir/test.jpg 设置 Content-type 并输出二进制流</para>
					<para>详细参考</para>
					<screen>
				<![CDATA[
<?php
    // Test image.
    $images = '/test/foo.png';

    $headers = apache_request_headers();

    if (isset($headers['If-Modified-Since']) && (strtotime($headers['If-Modified-Since']) == filemtime($images))) {
        header('Last-Modified: '.gmdate('D, d M Y H:i:s', filemtime($images)).' GMT', true, 304);
    } else {
        header('Content-Type: image/png');
        print file_get_contents($fn);
		if (file_exists($images)) {
			header('Last-Modified: '.gmdate('D, d M Y H:i:s', filemtime($images)).' GMT', true, 200);
			header("Cache-Control: max-age=3600, must-revalidate");
			header('Content-Length: '.filesize($images));
			header('Content-type: ' .mime_content_type($images));
			flush();
			readfile($images);
			exit;
		}
    }
				]]>
					</screen>
					<para>javascript 文件也可以使用类似方法处理</para>
					<screen>
				<![CDATA[
	private function js($file){
		if (file_exists($file)) {
			header("Cache-Control: max-age=3600, must-revalidate");
			header('Content-type: text/javascript');
			flush();
			readfile($file);
			exit;
		}
	}
				]]>
					</screen>
				</section>
			</section>
			<section>
				<title>Expires</title>
				<para>只要向浏览器输出过期时间HTTP协议头，不论是html还是动态脚本，都能被缓存。</para>
				<para>HTML META</para>
				<screen>
				<![CDATA[
<meta http-equive="Expires" content=" Mon, 10 Jan 2000 00:00:00 GMT"/>
<meta http-equive="Cache-Control" content="max-age=300"/>
<meta http-equive="Cache-Control" content="no-cache"/>
				]]>
				</screen>
				<para>动态脚本</para>
				<screen>
				<![CDATA[
Expires: Mon, 10 Jan 2000 00:00:00 GMT
Cache-Control: max-age=300
Cache-Control: no-cache

header("Expires: " .gmdate ("D, d M Y H:i:s", time() + 3600 * 24 * 7). " GMT");
header("Cache-Control: max-age=300");
header("Cache-Control: no-cache");
				]]>
				</screen>
				<para>很多web server都提供 Expires 模块</para>
				<tip>
					<para>有些浏览器可能不支持。</para>
				</tip>
			</section>
			<section>
				<title>If-Modified-Since / Last-Modified</title>
				<para>If-Modified-Since 小于 Last-Modified 返回 200</para>
				<screen>
				<![CDATA[
neo@neo-OptiPlex-780:/tmp$ curl -I http://www.163.com/
HTTP/1.1 200 OK
Server: nginx
Content-Type: text/html; charset=GBK
Transfer-Encoding: chunked
Vary: Accept-Encoding
Expires: Mon, 16 May 2011 08:12:05 GMT
Cache-Control: max-age=80
Vary: User-Agent
Vary: Accept
Age: 38
X-Via: 1.1 ls100:8106 (Cdn Cache Server V2.0), 1.1 lydx156:8106 (Cdn Cache Server V2.0)
Connection: keep-alive
Date: Mon, 16 May 2011 08:11:23 GMT
				]]>
				</screen>
				<para>If-Modified-Since 大于 Last-Modified 返回 304</para>
				<screen>
				<![CDATA[
neo@neo-OptiPlex-780:/tmp$ curl -H "If-Modified-Since: Fri, 12 May 2012 18:53:33 GMT" -I http://www.163.com/
HTTP/1.0 304 Not Modified
Content-Type: text/html; charset=GBK
Cache-Control: max-age=80
Age: 41
X-Via: 1.0 ls119:80 (Cdn Cache Server V2.0), 1.0 lydx154:8106 (Cdn Cache Server V2.0)
Connection: keep-alive
Date: Mon, 16 May 2011 08:11:14 GMT
Expires: Mon, 16 May 2011 08:11:14 GMT
				]]>
				</screen>
			</section>
			<section>
				<title>ETag / If-None-Match</title>
				<screen>
				<![CDATA[
neo@neo-OptiPlex-780:/tmp$ curl -I http://images.example.com/test/test.html
HTTP/1.1 200 OK
Cache-Control: s-maxage=7200, max-age=900
Expires: Mon, 16 May 2011 09:48:45 GMT
Content-Type: text/html
Accept-Ranges: bytes
ETag: "1984705864"
Last-Modified: Mon, 16 May 2011 09:01:07 GMT
Content-Length: 22
Date: Mon, 16 May 2011 09:33:45 GMT
Server: lighttpd/1.4.26
				]]>
				</screen>
				<screen>
				<![CDATA[
neo@neo-OptiPlex-780:/tmp$ curl -H 'If-None-Match: "1984705864"' -I http://images.example.com/test/test.html
HTTP/1.1 304 Not Modified
Cache-Control: s-maxage=7200, max-age=900
Expires: Mon, 16 May 2011 09:48:32 GMT
Content-Type: text/html
Accept-Ranges: bytes
ETag: "1984705864"
Last-Modified: Mon, 16 May 2011 09:01:07 GMT
Date: Mon, 16 May 2011 09:33:32 GMT
Server: lighttpd/1.4.26
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>CDN (Content Delivery Network) 与反向代理缓存</title>
			<para>
				<graphic format="png" fileref="../images/workflow/user-browser-server.png" srccredit="neo" />
			</para>
			<orderedlist>
				<title>具有代表性的逆向代理服务器：</title>
				<listitem>
					<para>Squid</para>
				</listitem>
				<listitem>
					<para>Nginx</para>
				</listitem>
				<listitem>
					<para>Varnish</para>
				</listitem>
				<listitem>
					<para>Apache cache module</para>
				</listitem>
			</orderedlist>
			<orderedlist>
				<title>其它逆向代理服务器</title>
				<listitem>
					<para>一些提供cache的硬件设备</para>
				</listitem>
				<listitem>
					<para>最近几年出现了的 China Cache 服务商，也称CDN</para>
				</listitem>
			</orderedlist>
			<para>很多CDN厂商使用Squid 二次开发做为CDN节点，通过全球负载均衡使用分发</para>
			<orderedlist>
				<title>这些CDN厂商主要做了一下二次开发</title>
				<listitem>
					<para>logs 日志集中</para>
				</listitem>
				<listitem>
					<para>流量限制</para>
				</listitem>
				<listitem>
					<para>push,pull操作</para>
				</listitem>
				<listitem>
					<para>url 刷新</para>
				</listitem>
			</orderedlist>
			<para>s-maxage 与 max-age用法类似，s-maxage针对代理服务器缓存。同样适用于CDN</para>
			<para>s-maxage 与 max-age 组合使用可以提高CDN性能</para>

			<section>
				<title>CDN接口API</title>
				<para>与CDN有关的开发工作</para>
				<para>CDN 内容更新，一般厂商会提供一个SOAP接口，你可以通过接口刷新你的内容。但接口有限制，不能随意使用，一般是多少秒可以刷新一次，或者一天可以刷新几次</para>
			</section>
			<section>
				<title>方向代理页面过期处理</title>
				<para>方向代理一般都支持PURGE协议，Squid,Varnish等等向管理端口发送 PURGE 即可是使用页面刷新</para>
				<screen><![CDATA[
PURGE http://netkiller.github.net/index.html
				]]></screen>
				<para>有些方向代理如：Varnish 可以使用正则表达式</para>
				<para>同时这些代理服务器都承受管理命令</para>
				<para>squid: squidclient </para>
				<para>varnish: varnishadm</para>
			</section>
			<section>
				<title>内容版本化</title>
				<para>例如这样的URL</para>
				<screen><![CDATA[
http://images.example.com/logo.gif
http://images.example.com/product.jpg
				]]></screen>
				<para>我们可以通过Rewrite或PATHINFO等技术做为静态化。例如首次版本</para>
				<screen><![CDATA[
http://images.example.com/logo.1.gif		=> logo.gif
http://images.example.com/product.1.jpg		=> product.jpg
				]]></screen>
				<para>原图发生变化后，版本递增</para>
				<screen><![CDATA[
http://images.example.com/logo.2.gif		=> logo.gif
http://images.example.com/product.2.jpg		=> product.jpg
				]]></screen>
				<para>就的URL将丢弃</para>
				<screen><![CDATA[
http://images.example.com/logo.1.gif
http://images.example.com/product.1.jpg
				]]></screen>
				<para>CDN 就回源去下面的URL，并且取到的是新图</para>
				<screen><![CDATA[
http://images.example.com/logo.2.gif
http://images.example.com/product.2.jpg
				]]></screen>
			</section>
		</section>

		<section>
			<title>负载均衡设备</title>
			<para>F5 Big-IP, Array 等设备都提供硬件加速，其原理与squid, apache提供的功能大同小异</para>
			<para>其中Array 页面压缩采用硬件压缩卡实现，SSL加速也采用硬件实现</para>
		</section>
		<section>
			<title>WEB服务器缓存</title>
			<para>例如，通过配置apache实现自身 cache</para>
		</section>
		<section>
			<title>应用程序缓存</title>
			<para>在这个领域百花齐放，相信你一定能找到适合你的。这些cache会为你提供一些api，来访问它。</para>
			<para>代表性的 memcached 据我所是sina广泛使用，腾讯也曾经使用过后来开发了TC(Tencent Cache)，台湾雅虎则使用APC Cache。</para>
			<para>另外模板引擎也有自己的缓存系统</para>
		</section>
		<section>
			<title>数据库缓存</title>
			<para>数据库本身就有这个配置选项，如果需要你仍然可以在数据库前面加一道Cache。</para>
			<para>例如PostgreSQL, MySQL 都提供参数可以将memcached编译到它内部</para>
		</section>
	</section>
	&section.web.static.xml;

	<section id="media">
		<title>多媒体数据分离</title>
		<section>
			<title>图片服务器分离</title>
			<orderedlist>
				<title>为什么要将图片服务器分离出来？</title>
				<listitem>
					<para>图片通常比较大，下载需要更长的时间，而web容器并发数也是相当宝贵的仅次于数据库。</para>
				</listitem>
				<listitem>
					<para>传统浏览器一个窗口只占用一个链接数，目前主流浏览器都支持多线程下载，下载HTML页面同时，采用多线程下载其它多媒体数据。</para>
				</listitem>
			</orderedlist>
			<para>
				我们举一个例子，你的服务器并发能力只用1000，早期浏览器不支持多线程，所以同一时刻，你的服务器可以承受1000个人同时访问。
				但现在不同了，基本所有的浏览器都支持多线程，假如你的页面中有9张小图片,同一时刻你的服务器仅仅能应付1000/10 = 100个用户。
			</para>
			<para>所以我们要将图片和其他多媒体文件分离出来，单独使用一台服务器处理请求。</para>
			<tip>
				<para>图片服务器建议使用lighttpd与squid缓存配合使用效果更好或购买CDN的服务。</para>
			</tip>
		</section>
		<section>
			<title>目录层次规划</title>
			<para>日期有利于归档</para>
			<screen>
			<![CDATA[
/www/images
/www/images/2008
/www/images/2008/01
/www/images/2008/01/01
			]]>
			</screen>
			<para>分类不同用途的文件</para>
			<screen>
			<![CDATA[
/www/images
/www/images/theme/2009

# article id 000001
/www/images/article/2009/01/000001

# product id 00001
/www/images/product/2009/01/01/00001

# member name neo
/www/images/member/2009/01/01/neo
			]]>
			</screen>
			<para>根据你的数据量，创建目录深度, 并且目录深度有规律可循。</para>
			<para>虽然64bit 文件系统不限制文件数量与目录深度，但是我还是建议按我的方式规划目录。</para>
			<para>这样规划目录便于缓存控制，如：</para>
			<para>images/2008/* 永久缓存</para>
			<para>images/2009/* 缓存一个月</para>
			<para>images/2010/* 缓存一小时</para>
			<para>images/2010/06/* 缓存5分钟</para>
		</section>
		<section>
			<title>多域名访问</title>
			<para>部分浏览器（IE）相同域名只能创建2个线程，在页面中使用多个域名可以解决这个限制</para>
			<screen>
			<![CDATA[
img1.example.com IN CNAME images.example.com.
img2.example.com IN CNAME images.example.com.
img3.example.com IN CNAME images.example.com.
...
imgN.example.com IN CNAME images.example.com.
			]]>
			</screen>
		</section>
	</section>
	&section.web.image.xml;
	<section id="compress">
		<title>压缩数据传输</title>
		<para>服务器将html或脚本输出压缩，用户从服务器取得数据后由浏览器解压</para>
		<orderedlist>
			<title>压缩数据传输实现方法：</title>
			<listitem>
				<para>apache mod_deflate</para>
			</listitem>
			<listitem>
				<para>lighttpd compress module</para>
			</listitem>
		</orderedlist>
		<section>
			<title>Minify JS</title>
			<para>最小化js文件</para>
			<section>
				<title>jsmin</title>
				<para>http://crockford.com/javascript/jsmin</para>
				<screen>
				<![CDATA[
jsmin <fulljslint.js >jslint.js
				]]>
				</screen>
			</section>
			<section>
				<title>yuicompressor</title>
				<para>http://developer.yahoo.com/yui/compressor/</para>
				<screen>
				<![CDATA[
Usage: java -jar yuicompressor-x.y.z.jar [options] [input file]
				]]>
				</screen>
			</section>
			<section>
				<title>shrinksafe</title>
				<para>http://dojotoolkit.org/docs/shrinksafe</para>
			</section>
		</section>
	</section>

	<section id="ssl">
		<title>SSL</title>
		<para>SSL 加密传输，为电子商务提供交易安全保护，什么时候该使用 SSL呢：</para>
		<orderedlist>
			<title>使用SSL</title>
			<listitem>
				<para>用户登录</para>
			</listitem>
			<listitem>
				<para>购物流程</para>
			</listitem>
			<listitem>
				<para>支付</para>
			</listitem>
		</orderedlist>
		<para>什么时候不使用SSL? 经过SSL加密后，你就失去了很多功能，你不能在对页面做Cache/CDN，SSL加密与解密需要耗费你的服务器CPU与内存资源，能不使用尽量不使用。</para>
		<para>对于SSL消耗你服务器资源这方面有两个方案解决</para>
		<orderedlist>
			<listitem>
				<para>将SSL证书安装到CDN上，目前蓝讯，网宿等等CDN厂商都提供SSL服务。我与上两家技术人员沟通过，也安装了证书实际测试一下，你可以放心是使用。</para>
			</listitem>
			<listitem>
				<para>将SSL证书安装到负载均衡设备，这些设备都采用专用硬件处理SSL请求，我测试过F5，Array，Banggoo</para>
			</listitem>
		</orderedlist>
		<para>采用上面两种方案，无需改变你目前的服务器配置，他们的原理是</para>
		<screen>
		<![CDATA[
user (https://www.example.com) --> CDN or SLB (SSL) --> http://www.example.com
		]]>
		</screen>
		<para>用户访问https,到达CDN或者负载均衡，CDN/SLB 通过http://请求源站，然后将内容SSL加密，返回给用户，这样用户得到的是加密内容。</para>
		<para>用户提交数据，交给CDN/SLB，CDN/SLB将SSL加密数据卸载证书，然后将解密后数据发回源站。</para>
		<para>CDN与SLB加载卸载证书原理很简单，不难理解。</para>
		<para>我来教你DIY一个，你可以使用Squid，Nginx，Apache等等反向代理服务器，将证书安装在反向代理上，请求源站仍然采用http。</para>
		<tip>
			<title>SSL注意事项</title>
			<para>你如果认为把SSL挂载到网站前端就，大功告成，完事了，那你错了。</para>
			<para>幸运的话你会成功，但有时的时候你发现你的证书不被信任。如果你是个细心的人，你会发现单个图片，或者你创建换成测试文件 echo helloworld &gt; index.html 证书都是OK的。</para>
			<para>这个问题出在你的html页面中，安装有SSL证书的网站，不能有外链js,flash等等不安全内容。</para>
		</tip>
	</section>
	&section.web.search.xml;
	<section>
		<title>静态网站繁简转换</title>
		<para>方案1: User -> Squid ->Web Server</para>
		<para>修改squid源码，加入iconv(big5,gb2312,html page)</para>
		<screen>
		<![CDATA[
e.g.1 user (gb.example.org) -> Squid (big5->gb2312) -> web server
e.g.2 user (big5.example.org) -> Squid (gb2312->big5) -> web server
		]]>
		</screen>
	</section>
</section>