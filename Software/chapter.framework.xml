<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.framework.xml 662 2013-08-14 02:46:24Z netkiller $ -->
<chapter id="framework">
	<title>Framework Design</title>
	<section id="framework.choice">
    	<title>开发框架 Framework</title>
		<para>选择一个好的开发框架，很重要。不过大部分框架都针对于软件开发，而我们要的是轻量级，适合高负载，灵活的框架。</para>
	    <para>框架的分类</para>
	    <itemizedlist>
	    	<listitem>本地框架HMVC，MTV</listitem>
	    	<listitem>远程框架SOA/REST</listitem>
	    	<listitem>混合框架</listitem>
	    </itemizedlist>
		<para>上面框架可以满足我们绝大多数需求，如URL定义，Session/Cookie管理，多语言国际化，数据库访问等等。</para>
		<para>Java和.Net我没有太多的经验，php我有10+年经验，我在各种框架之间做比较发现CodeIgniter框架比较适合我们的需求。</para>
		<para>框架是没有100%完美的，你仍需要对它进行二次开发。如果你有充足的时间，针对自身系统系统的特点设计一个更适合您网站的框架，这是最好的选择。</para>
		<para>设计一个框架需要用到很多知识，需要有丰富的经验。目前主流框架都是基于MVC设计思想，要设计一个框架你必须了解MVC (Model-View-Controller) 参考：http://www.itisedu.com/phrase/200604231324325.html</para>
		<para>开发一个框架包括那些重点呢，下面我把一些要点一一列出，然后一个个地突破，我这里使用php为例子，上面我已经说过语言只是工具，所以学习是设计思想，不要拘泥于语言：</para>
		<itemizedlist>
			<listitem><para>JS封装（javascript）</para></listitem>
			<listitem><para>模板（template）</para></listitem>
			<listitem><para>url</para></listitem>
			<listitem><para>session/cookie</para></listitem>
			<listitem><para>语言包（language package）</para></listitem>
			<listitem><para>编码（unicode）</para></listitem>
			<listitem><para>数据库访问（database OR Mapping）</para></listitem>
			<listitem><para>权限（Permission）</para></listitem>
		</itemizedlist>
		<para>如果重新开发一个框架，我认为太现实，我的建议使用现有pear库，搭建一个MVC框架。例如：</para>
		<itemizedlist>
			<listitem><para>Model（pear db）</para></listitem>
			<listitem><para>View（smarty template）</para></listitem>
			<listitem><para>Controller (pathinfo)</para></listitem>
		</itemizedlist>
	    <section>
	    	<title>HMVC</title>
			<itemizedlist>
				<listitem><para>Python web2py</para></listitem>
				<listitem><para>Php CakePHP,Zend,CodeIgniter</para></listitem>
				<listitem><para>Perl Catalyst</para></listitem>
				<listitem><para>Java Struts,Spring MVC</para></listitem>
				<listitem><para>ruby on rails</para></listitem>
			</itemizedlist>
	    </section>
	    <section>
	    	<title>REST</title>
	    	<itemizedlist>
				<listitem><para>Python Pylons</para></listitem>
				<listitem><para>ruby on rails</para></listitem>
			</itemizedlist>
	    </section>
	    <section>
	    	<title>SNA (Shared Nothing Architecture)</title>
	    </section>
	    <section>
	    	<title>其他</title>
	    	<itemizedlist>
	    	<listitem><para>Python Django 是一个MTV框架</para></listitem>
	    	<listitem><para>.Net Framework</para></listitem>
	    	</itemizedlist>
	    </section>
    </section>
	<section id="mvc">
		<title>MVC Framework Design (设计MVC框架)</title>
		<para><graphic  format="png" fileref="../images/development/framework.png" srccredit="neo" /></para>
		<section id="hmvc">
			<title>HMVC Framework</title>
			<para>等我有时间在补充</para>
		</section>
	</section>
	<section id="framework.rest">
		<title>REST</title>
		<para><graphic  format="png" fileref="../images/development/framework-rest.png" srccredit="neo" width=""/></para>
		<section>
			<title>RESTful JSON API</title>
			<para>跨域</para>
		</section>
		
		<section>
			<title>Ajax 与 RESTful 跨域</title>
			<para>允许所有域请求</para>
			<screen>
server {
    listen       80;
    server_name  inf.netkiller.cn;

    charset utf-8;
    access_log  /var/log/nginx/inf.netkiller.com.access.log  main;
    error_log  /var/log/nginx/inf.netkiller.com.error.log;

    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Headers Content-Type,Origin;
    add_header Access-Control-Allow-Methods GET,OPTIONS;

	...
	...
}
			</screen>
			<para>允许特定的域请求</para>
			<screen>
add_header Access-Control-Allow-Origin http://www.netkiller.com;
			</screen>
		</section>
		
	</section>

	<section id="framework.soa">
		<title>Service-oriented architecture (SOA)</title>
 		<graphic  format="png" fileref="../images/framework/SOA.png" srccredit="neo" />

		<para>SOA 与 REST很多相同之处，目前SOA主要是基于SOAP实现，也有基于MQ的实现。而REST只限于HTTP POST/GET/PUT/DELETE等等。</para>
		<para>我个人比较喜欢机遇TCP的SOA实现，不喜欢SOAP大量XML传输。</para>
		<section>
			<title>SOAP实现</title>

			<para>这里提供一个简单的机遇SOAP实现的SOA框架</para>
			<para>index.php入口文件</para>
			<programlisting>
			<![CDATA[
<?php
define ('CONFIG_DIR', '../config/');
define ('LIBRARY_DIR', '../library/');
define ('DEBUG', false);
//define ('DEBUG', ture);

require_once(CONFIG_DIR. 'default.php');
$remote_addr = $_SERVER['REMOTE_ADDR'];
if(!in_array($remote_addr, $firewall)) {
	printf("Permission denied: %s", $remote_addr);
	exit(0);
}

$request_uri = $_SERVER['REQUEST_URI'];
$classspath = LIBRARY_DIR.strtolower($request_uri)  . '.class.php';
if( is_file($classspath) ){
	require_once($classspath);
}else{
	die("Cannot loading interface!");
}

$class = ucfirst(substr($request_uri, strrpos($request_uri, '/')+1));
if( DEBUG ){
		printf("%s<br>",$class);
}

if (class_exists($class)) {
    $server = new SoapServer(null, array('uri' => "http://webservice.example.com"));
	$server->setClass($class);
	$server->handle();
}else{
	die('Object isnot exist.');
}
			]]>
			</programlisting>
			<para>接口文件</para>
			<programlisting>
			<![CDATA[
<?php
require_once('common.class.php');

class Members extends Common{
	private $dbh = null;
	public function __construct() {
		parent::__construct();
		$this->dbh = new Database('slave');
	}
	public function getAllByUsernameAndMobile($username,$mobile){
		$result = array();
		if(empty($username) or empty($mobile)){
			return($result);
		}
		$sql = "SELECT username, chinese_name, sex FROM members m, members_digest md WHERE m.id = md.id and m.username= :username and md.mobile = md5( :mobile );";
		$stmt = $this->dbh->prepare($sql);
		$stmt->bindValue(':username', $username);
		$stmt->bindValue(':mobile', $mobile);
		$stmt->execute();
		$result = $stmt->fetch(PDO::FETCH_ASSOC);
		return($result);
	}
	public function getAllByLimit($limit,$offset)
	{
		$sql = "SELECT username FROM members limit ".$limit.",".$offset;
		$stmt = $this->dbh->query($sql);
		while ($row = $stmt->fetch()) {
			//printf("%s\r\n", $row['username']);
			$result[] = $row['username'];
		}
		return $result;
	}
	function __destruct() {
       $this->dbh = null;
   }
}
			]]>
			</programlisting>
			<para>客户端调用实例</para>
			<programlisting>
			<![CDATA[
<?php

$options = array('uri' => "http://webservice.example.com",
                'location'=>'http://webservice.example.com/members',
				 'compression' => 'SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP',
				'login'=>'neo',
				'password'=>'chen',
                'trace'=>true
				);
$client = new SoapClient(null, $options);

try {

	print_r($client->getAllByUsernameAndMobile('280600086','13113668890'));
	print_r($client->getAllByLimit(20,20));

}
catch (Exception $e)
{
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}
			]]>
			</programlisting>
			<para>Nginx 虚拟主机配置文件 /etc/nginx/conf.d/webservice.example.com.conf</para>
			<programlisting>
			<![CDATA[
server {
    listen       80;
    server_name  webservice.example.com;

    charset utf-8;
    access_log  /var/log/nginx/webservice.example.com.access.log  main;
    auth_basic            "Login";
    auth_basic_user_file  htpasswd;

    location / {
        root   /www/example.com/webservice.example.com/htdocs;
        index  index.html index.php;
		if ($request_filename !~ (js|css|images|robots/.txt|.*\.html|index/.php) ) {
	            rewrite ^/(.*)$ /index.php/$1 last;
		    break;
		}
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    location ~ /index.php/ {
        root           /www/example.com/webservice.example.com/htdocs;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /www/example.com/webservice.example.com/htdocs$fastcgi_script_name;
        include        fastcgi_params;
    }

}
			]]>
			</programlisting>
			<para>每增加一个功能需求，在library中创建一个 Class 文件即可。</para>
			<para>index.php 有IP过滤功能，禁止非法IP访问</para>
			<para>客户端采用压缩传输，节省xml传输开销</para>
			<para>Nginx 设置了HTTP认证，防止他人探测，另外提示你还可以采用双向SSL认证。</para>
		</section>
		<section>
			<title>MQ 实现</title>
		</section>
	</section>

	&chapter.dispatcher.xml;
	&chapter.plugin.xml;
	&chapter.interface.xml;

	<section id="framework.js">
		<title>Javascript Framework</title>
		<para>javascript是面向过程的，只要请引用.js文件即可访问他的方法（function），并且传统方式会定义很多全局变量。如果大量使用javascript难免会出现变量覆盖，或function同名。</para>
		<para>所以我们要将javascript封装成class，另一点我们也需要面向对象支持。下面是几个常用的JS开发框架（javascript framework）。</para>
		<itemizedlist>
			<listitem><para>prototype</para></listitem>
			<listitem><para>jQuery</para></listitem>
			<listitem><para>mootools</para></listitem>
			<listitem><para>script.aculo.us</para></listitem>
			<listitem><para>Dojo</para></listitem>
			<listitem><para>MochiKit</para></listitem>
			<listitem><para>rico</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Javascript GUI</title>
			<listitem><para>ExtJS</para></listitem>
			<listitem><para>qooxdoo</para></listitem>
		</itemizedlist>
		<section>
			<title>Minify JS</title>
			<para>最小化js文件</para>
			<section>
				<title>jsmin</title>
				<para>http://crockford.com/javascript/jsmin</para>
				<screen>
				<![CDATA[
jsmin <fulljslint.js >jslint.js
				]]>
				</screen>
			</section>
			<section>
				<title>yuicompressor</title>
				<para>http://developer.yahoo.com/yui/compressor/</para>
				<screen>
				<![CDATA[
Usage: java -jar yuicompressor-x.y.z.jar [options] [input file]
				]]>
				</screen>
			</section>
			<section>
				<title>shrinksafe</title>
				<para>http://dojotoolkit.org/docs/shrinksafe</para>
			</section>
		</section>
	</section>

	<section id="framework.template">
		<title>模板(template)</title>
		<para>模板最早是在cgi程序中广泛应用，cgi是动态页面的第一代，同期还有NSAPI,ISAPI,第二代是fastcgi,asp,php,ColdFusion...第三代是.net与java。</para>
		<para>模板的特点：</para>
		<itemizedlist>
			<listitem><para>模板可以分离代码和页面</para></listitem>
			<listitem><para>模板能够改善页面结构</para></listitem>
			<listitem><para>模板可实现页面重用</para></listitem>
			<listitem><para>模板可以区块化，如同搭积木</para></listitem>
			<listitem><para>设计人员不需要关心代码</para></listitem>
			<listitem><para>实现主题</para></listitem>
		</itemizedlist>
		<para>模板有很多优点，但它也会增加系统开销，不过我们可以通过cache来解决这个问题。</para>
		<para>常用模板引擎：</para>
		<itemizedlist>
			<listitem><para>PHP: smarty template</para></listitem>
			<listitem><para>Perl: TT template</para></listitem>
			<listitem><para>Python：Cheetah</para></listitem>
		</itemizedlist>
		<section>
			<title>HTML 页面优化</title>
			<para>页面减肥</para>
			<screen>
			<![CDATA[
{strip}
<html>
....<head>
........<title>Title</title>
....</head>
....<body>
........<h1>Hello world</h1>
........<div class="">
............Test
........</div>
....</body>
</html>
{/strip}
			]]>
			</screen>
			<para>Smarty 的{strip}可以删除页面中的空格，Tab符以及回车换行符</para>
		</section>
	</section>
	<section id="framework.session">
    	<title>Session/Cookie</title>
    	<para>为什么我要在这里提Session和Cookie，这也大型站点必须要处理问题。</para>
    	<section>
    		<title>Session</title>
			<para>在集群环境中与单服务器是不一样的，集群组成可分为调度服务器和节点，节点数量不定，单个节点安装有web服务器，用户每次访问网站调度服务器随机分配一个节点给该用户，
				举一个例子：用户在网站上看新闻，点击第一个连接被分配到node 1上去，当他看完这条新闻并单击下一条时，可能被分配到其它节点上，这里刚才建立的session在node 1上，
				它就会因失去session而必须重新登录。
			</para>
			<para>所以我们要同步所有节点上的Session, 另外如果能用Cookie代替Session的地方尽量使用Cookie。</para>
    	</section>
		<section id="session">
			<title>Session 共享</title>
			<orderedlist>
				<title>解决方案：</title>
				<listitem><para>不用Session，使用Cookie取而代之</para></listitem>
				<listitem><para>共享Session，放到数据库中，放到Memcache中</para></listitem>
			</orderedlist>
			<para>PHP Session很有解决方案：</para>
			<para>查看PHP手册 Session Extensions 章节，重写Session逻辑。</para>
			<para>共享Session用Memcache，在php.ini中配置即可</para>
			<screen>
session.save_handler = memcache
session.save_path = tcp://127.0.0.1:10001
			</screen>
		</section>
		<section>
			<title>Cookie</title>
			<para>Cookie 我这里提到cookie是可以实现“单点登录”功能。</para>
			<para>一个网站可能不指一组集群系统，如news.example.org, bbs.example.org, blog.example.org 要实现在一处登录即可在其它站点上同时也处于登录状态，就要用到Cookie来实现。</para>
			<section>
				<title>Cookie 安全</title>
				<para>Cookie存储在用户端，Cookie数据极易伪造。下面提供几个方案。</para>
				<itemizedlist>
					<listitem><para>在Cookie数据上加干扰词</para></listitem>
					<listitem><para>在反向代理上做手脚</para></listitem>
					<listitem><para>负载均衡设备都提供Cookie保护功能</para></listitem>
				</itemizedlist>
			</section>
			<section>
				<title>cookie-free domains</title>
			</section>
			<section>
				<title>P3P</title>
				<para>header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"');</para>
				<screen>
				<![CDATA[
<?php
header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"');
setcookie("test", $_GET['id'], time()+3600, "/", ".a.com");
?>
				]]>
				</screen>
			</section>
		</section>
	</section>

	<section id="framework.i18n">
	    <title>国际化 Locale database。</title>
		    <para>在开始具体介绍之前，需要先介绍几个术语：</para>
			<itemizedlist>
				<listitem><para><![CDATA[i18n: 就是internationalization, 国际化,由于首字母"i"和末尾字母"n"间有18个字符，所以简称i18n. internationalization指为了使应用程序能适应不同的语言和地区间的变化而不作系统性的变化所采取的设计措施。]]></para></listitem>
				<listitem><para><![CDATA[l10n: 就是localization, 本地化，由于首字母"l"和末尾字母"n"间有10个字母，所以简称l10n. localization指为了使应用软件能够在某一特定语言环境或地区使用而加入本地特殊化部件和翻译后文本的过程。]]></para></listitem>
				<listitem><para>locale: 简单来说是指语言和区域进行特殊组合的一个标志，如：en-us, zh-cn, zh-tw</para></listitem>
			</itemizedlist>
			<para>l10n有很多历史遗留问题，l10n目前已经被i18n取代。</para>
			<para>我自己曾经使用过下面四种方式实现语言包</para>
			<orderedlist>
				<listitem><para>定义一个数组</para></listitem>
				<listitem><para>使用数据库</para></listitem>
				<listitem><para>使用文件</para></listitem>
				<listitem><para>使用数据结构</para></listitem>
			</orderedlist>
		<section id="unicode">
		     <title>Unicode</title>
		     <para>相比几年前，目前各种语言对UTF-8支持都比较好。</para>
		     <para>在BBS上常常看到一些网友抱怨UTF-8出现“乱码”问题，让我们看看都有哪些地方涉及编码问题。</para>
		     <para>用户输入法->IDE开发环境,浏览器->web容器->数据库</para>
		     <para>任何一个环节出现问题有可能出现问题</para>
		     <itemizedlist>
				<listitem><para>首先是输入法，早期输入法可能是GB2312或GBK。</para></listitem>
				<listitem><para>其次是IDE开发环境，当你创建一个空文件时，它的已经具备某种编码，一般外国开发工具默认是acsii，这一点我认为Dreamware做的最好，可以随时切换编码。</para></listitem>
				<listitem><para>浏览器现在基本不用担心</para></listitem>
				<listitem><para>web容器apache 2.x对unicode支持很好，tomcat本身机器码就是unicode。</para></listitem>
				<listitem><para>数据库问题也不大，PostgreSQL相比MySQL对Unicode支持也早，也比较好。MySQL这方面有点复杂。</para></listitem>
			</itemizedlist>
		    <tip>
				<para>如果你不考虑使用Unicode并且想支持繁体和简体中文，你可以使用GBK，但我建议你使用GB18030。</para>
				<para>Unicode不是最好的选择，它占用三个字节，数据量较大，选择适合你的编码，如果你是英文网站，请使用ISO-8859-1，如果是简体中文，请使用GB2312</para>
			</tip>
		</section>
		<section>
			<title>繁简转换</title>
			<para>方案1: User -> Squid ->Web Server</para>
			<para>
				修改squid源码，加入iconv(big5,gb2312,html page)
			</para>
			<screen>
e.g.1 user (gb.example.org) -> Squid (big5->gb2312) -> web server
e.g.2 user (big5.example.org) -> Squid (gb2312->big5) -> web server
			</screen>
		</section>
	</section>

	<section id="framework.database">
		<title>数据库访问</title>
		<para>早期php访问数据库的做法是写一个连接文件，include包含进来，然后在页面使用sql操作函数，返回结果。</para>
		<itemizedlist>
			<listitem><para>CRUD (create, read, update and delete)</para></listitem>
			<listitem><para>Active Record</para></listitem>
			<listitem><para>OR Mapping</para></listitem>
		</itemizedlist>
	    <programlisting role="sql">
	    </programlisting>
	    <para>另外设计一个框架是还要考虑，切割表，分库。</para>
	    <section>
	    	<title>CRUD</title>
	    </section>
	    <section>
	    	<title>Active Record</title>
	    </section>
	    <section>
	    	<title>OR Mapping</title>
	    </section>
	</section>
	<section id="framework.cache">
		<title>Cache</title>
		<para>Cache大体分为两种，一种是文件Cache,另一种是内存Cache。按应用划分，可以分为页面Cache和局部Cache</para>
		<section>
			<title>页面缓存</title>
			<orderedlist>
				<title>页面缓存有三种实现方式：</title>
				<listitem><para>反向代理</para></listitem>
				<listitem><para>HTTP Header</para></listitem>
				<listitem><para>Template 层</para></listitem>
			</orderedlist>
			<para>页面cache的原理是推送HTTP协议头，修改网页过期时间。</para>
		</section>
		<section>
			<title>局部缓存</title>
			<para>局部cache是可以将数组，序列化对象，字符串等等，分别cache，并设置ttl值（生存时间）</para>
			<para>数据库与应用程序之间加一层Cache,性能将会大幅提升。</para>
			<para>我们一般会把Cache封装为一个Class (类)，并且支持多种Cache API.如：Apc Cache,Xcache, Memcache...</para>
			<para>Cache操作很简单，添加，更新，删除，状态几种操作，其中添加与更新可以共用一个方法。</para>
		</section>
	</section>
	<section id="framework.sso">
		<title>Single sign-on (SSO) 单点登录</title>
		<para>提供一站式登录，即一旦在*.domain.com任何位置登录后， 全域均不需要在重新登录</para>
		<orderedlist>
			<title>解决方案：</title>
			<listitem><para>登录 cookie 的host 使用domain.com 不要使用www.docmain.com</para></listitem>
			<listitem><para>子域名通过rewrite实现,即bbs.domain.com = www.domain.com/bbs</para></listitem>
		</orderedlist>
	</section>
	<section id="framework.search">
		<title>搜索引擎</title>
	</section>
	<section id="sync">
		<title>Synchronous/Asynchronous</title>
		<para>举几个例子</para>
		<orderedlist>
			<title>synchronous (同步)</title>
			<listitem><para>用户登录</para></listitem>
			<listitem><para>商品价格与相关计算</para></listitem>
			<listitem><para></para></listitem>
		</orderedlist>

		<orderedlist>
			<title>asynchronous(异步)</title>
			<listitem><para>批量操作建议使用异步方式</para></listitem>
			<listitem><para>消息广播操作</para></listitem>
			<listitem><para></para></listitem>
		</orderedlist>
		<para>用户注册，发帖与评论。采用同步或异步均可，还要看你的具体情况而且。</para>
	</section>
	<section id="mq">
		<title>Message Queuing</title>
		<para>Message Queuing 有 synchronous (同步)/asynchronous(异步) 之分，不同场景适合不同的处理方式。</para>
		<para><ulink url="http://www.rabbitmq.com/">RabbitMQ</ulink></para>
		<para><ulink url="http://www.zeromq.org/">ZeroMQ</ulink></para>
		<para><ulink url="http://activemq.apache.org/">Apache ActiveMQ</ulink></para>
	</section>
	<section id="framework.hash">
		<title>Hash</title>
	</section>
	<section id="framework.sharding">
		<title>Sharding 垂直/水平切割</title>
		<section>
			<title>面向服务</title>
		</section>
		<section>
			<title>面向数据库</title>
		</section>
	</section>
	<section id="app.logs">
		<title>日志系统</title>
		<para>开源的日志系统，包括facebook的scribe，apache的chukwa，linkedin的kafka和cloudera的flume等</para>
		<screen>
Scribe：https://github.com/facebook/scribe
Chukwa：http://incubator.apache.org/chukwa/
Kafka：http://sna-projects.com/kafka/
Flume：https://github.com/cloudera/flume/
		</screen>
	</section>
	<section id="cache">
		<title>Cache</title>
		<section>
			<title>CDN (Content Delivery Network) 与反向代理</title>
			<para><graphic format="png" fileref="../images/workflow/user-browser-server.png" srccredit="neo" /></para>
			<para>与CDN有关的开发工作</para>
			<section>
				<title>CDN接口API</title>
				<para>CDN 内容更新，一般厂商会提供一个SOAP接口，你可以通过接口刷新你的内容。但接口有限制，不能随意使用，一般是多少秒可以刷新一次，或者一天可以刷新几次</para>
			</section>
			<section>
				<title>方向代理页面过期处理</title>
				<para>方向代理一般都支持PURGE协议，Squid,Varnish等等向管理端口发送 PURGE 即可是使用页面刷新</para>
				<screen>
PURGE http://netkiller.github.net/index.html
				</screen>
				<para>有些方向代理如：Varnish 可以使用正则表达式</para>
				<para>同时这些代理服务器都承受管理命令</para>
				<para>squid: 	squidclient </para>
				<para>varnish: 	varnishadm</para>
			</section>
			<section>
				<title>内容版本化</title>
				<para>例如这样的URL</para>
				<screen>
http://images.example.com/logo.gif
http://images.example.com/product.jpg
				</screen>
				<para>我们可以通过Rewrite或PATHINFO等技术做为静态化。例如首次版本</para>
				<screen>
http://images.example.com/logo.1.gif		=> logo.gif
http://images.example.com/product.1.jpg		=> product.jpg
				</screen>
				<para>原图发生变化后，版本递增</para>
				<screen>
http://images.example.com/logo.2.gif		=> logo.gif
http://images.example.com/product.2.jpg		=> product.jpg
				</screen>
				<para>就的URL将丢弃</para>
				<screen>
http://images.example.com/logo.1.gif
http://images.example.com/product.1.jpg
				</screen>
				<para>CDN 就回源去下面的URL，并且取到的是新图</para>
				<screen>
http://images.example.com/logo.2.gif
http://images.example.com/product.2.jpg
				</screen>
			</section>
		</section>
		<section>
			<title>HTTP Cache</title>
			<para>Cache-Control</para>
			<screen>
max-age
max-age 格式写为：max-age=n，n是以秒为单位, 这个值是告知客户端GMT + N 后页面过期，缓存服务器在s-maxage值为空的时候也会使用这个参数的值。

s-maxage
s-maxage的格式跟max-age一样，只不过他是给缓存服务器使用的。

must-revalidate
这个参数用来告知客户端和缓存服务器，在GET请求的时候必须与源服务器验证实体是否为最新版本。

Cache-Control:max-age=1200,s-maxage=3600
			</screen>
			<screen>
Last-Modified
这个参数提供了实体最近一次被修改的时间。这个名字起得不错，当实体被修改了之后，这个参数也就会被修改.
			</screen>
			<para>ETag</para>
			<screen>
ETag
ETag是根据内容生成的一段hash字符串，采用信息摘要算法，保证每一个页面有一个唯一字串。
			</screen>
			<para>expires</para>
			<para>expires 是HTTP 1.0 中定义的，已经不能满足用户的需要在 HTTP 1.1 加入了max-age，建议使用 max-age替代expires</para>
			<screen>
指令					含义
public				可以在任何地方缓存
private				只能被浏览器缓存
no-cache			不能在任何地方缓存
must-revalidate		缓存必须检查更新版本
proxy-revalidate	代理缓存必须检查更新版本
max-age				内容能够被缓存的时期，以秒表示
s-maxage			覆盖共享缓存的max-age设置
			</screen>
			<para>在Squid, Varnish, Apache, Lighttpd, Nginx 中都可是实现HTTP Cache-Control推送，每次修改都需要重新加载，不太灵活。</para>
			<screen>
ExpiresActive On
ExpiresByType image/gif "access plus 1 month"
ExpiresByType image/png "access plus 1 month"
ExpiresByType image/jpeg "access plus 1 month"
ExpiresByType text/css "access plus 1 month"
ExpiresByType text/javascript "access plus 1 month"
ExpiresByType application/x-javascript "access plus 1 month"
ExpiresByType application/x-shockwave-flash "access plus 1 month"


server.modules = (
...
"mod_expire",
...
)

$HTTP["url"] =~ "^/images/" {
expire.url = ( "" => "access 30 days" )
}
			</screen>
			<para>我喜欢自己控制TTL时间，且每个页面单独设置，可以随时调整设置。</para>

			<section>
				<title>在程序中灵活操作 Cache-Control</title>

				<para>在MVC框架中每个控制器下的方法都可以单独操作Cache</para>
				<screen>
Class blog extend Controller{
	blog(){
		header('Cache-Control: max-age=28800');
	}
	list(){
		header('Cache-Control: max-age=3600');
	}
	details(){
		header('Cache-Control: max-age=160');
	}
}
				</screen>
				<para>你还可以封装到Controller中</para>
				<screen>
Class blog extend Controller{
	blog(){
		this->cache('28800');
	}
	list(){
		this->cache('3600');
	}
	details(){
		this->cache('160');
	}
}
				</screen>
			</section>
			<section>
				<title>非程序文件缓存处理</title>
				<para>首先做一个Rewrite让程序接管所有图片请求</para>
				<screen>
url.rewrite = ( "^/(.+)" => "/index.php/$1" )
				</screen>
				<para>然后程序通过PATHINFO取出图片URL</para>
				<screen>
http://images.example.com/your/dir/test.jpg => http://images.example.com/index.php/your/dir/test.jpg
				</screen>
				<para>程序取出 /your/dir/test.jpg 设置 Content-type 并输出二进制流</para>
				<para>详细参考</para>
				<screen>
				<![CDATA[
<?php
    // Test image.
    $images = '/test/foo.png';

    $headers = apache_request_headers();

    if (isset($headers['If-Modified-Since']) && (strtotime($headers['If-Modified-Since']) == filemtime($images))) {
        header('Last-Modified: '.gmdate('D, d M Y H:i:s', filemtime($images)).' GMT', true, 304);
    } else {
        header('Content-Type: image/png');
        print file_get_contents($fn);
		if (file_exists($images)) {
			header('Last-Modified: '.gmdate('D, d M Y H:i:s', filemtime($images)).' GMT', true, 200);
			header("Cache-Control: max-age=3600, must-revalidate");
			header('Content-Length: '.filesize($images));
			header('Content-type: ' .mime_content_type($images));
			flush();
			readfile($images);
			exit;
		}
    }
				]]>
				</screen>
				<para>javascript 文件也可以使用类似方法处理</para>
				<screen>
				<![CDATA[
	private function js($file){
		if (file_exists($file)) {
			header("Cache-Control: max-age=3600, must-revalidate");
			header('Content-type: text/javascript');
			flush();
			readfile($file);
			exit;
		}
	}
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>Cache 生存时间</title>
			<para>你不必一开始加费劲心机去考虑这个值，当网站运行一段时间后，利用玩站流量数据作为参考，一步一地尝试调整。</para>
		</section>
	</section>

	<section id="i18n">
		<title>i18n 国际化</title>
		<section>
			<title>数组方式</title>
			<para>这种方式流行于PHP语言，下面是一个例子</para>
			<example>
				<title>php language package</title>
				<programlisting role="php">
				<![CDATA[
<?php
	$language['hello_world'] = 'hello world !!!'
?>
				]]>
				</programlisting>
			</example>
		</section>
		<section>
			<title>数据库方式</title>
			<orderedlist>
				<title>数据库方式包括</title>
				<listitem><para>其他非关系型收据库 (Berkeley DB)</para></listitem>
				<listitem><para>对象/关系型收据库 ORDBMS （mysql）</para></listitem>
			</orderedlist>
			<para>Berkeley DB 是一个不错的选择，而且相对关系型数据库比较有优势。因为关系型数据库子并发数有限，连接资源很宝贵。</para>
			<example>
				<title>sql table language package</title>
				<programlisting role="sql">
				<![CDATA[
select id,key,value from language where country = 'zh-cn' and key = 'hello_world';
				]]>
				</programlisting>
			</example>
		</section>
		<section>
			<title>文件文件</title>
			<para>例如.ini文件</para>
			<programlisting role="php">
			<![CDATA[
news=新闻
top10=前十位
			]]>
			</programlisting>
		</section>
		<section>
			<title>Gettext</title>
			<para>The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications. Please see the gettext documentation for your system for a thorough explanation of these functions or view the docs at » http://www.gnu.org/software/gettext/manual/gettext.html.
			</para>
		</section>
		<section>
			<title>数据结构</title>
			<orderedlist>
				<title>数据结构方式主要包括</title>
				<listitem><para>哈希表 hash table</para></listitem>
				<listitem><para>类 class</para></listitem>
				<listitem><para>字典 dict</para></listitem>
				<listitem><para>图 map</para></listitem>
			</orderedlist>
			<tip><para>可能会用到序列化</para></tip>
		</section>
	</section>
	<section id="rss">
		<title>RSS / ATom</title>
		<para></para>
		<section>
			<title>Atom</title>
			<para><ulink url="http://www.atomenabled.org/"></ulink></para>
		</section>
	</section>
	&chapter.log.xml;
    &chapter.search.xml;
    &chapter.microservices.xml;
	<section id="debug">
		<title>debug</title>
		<para>生产环境不允许有任何调试输出，包括程序错误，这些信息应该写入error.log， 我们可以在网站放置一个调试入口，</para>
		<screen>
if(isset ($_GET['debug'])){

}else{

}
		</screen>
	</section>
	<section id="optimization">
		<title>性能优化</title>
		<section>
			<title>尽量使用单引号</title>
			<para>尽量使用单引号，迫不得已才使用双引号，因为双引号会处理转义字符。</para>
		</section>
	</section>
</chapter>
